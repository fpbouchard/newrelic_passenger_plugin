#!/usr/bin/env ruby

# Passenger agent to monitor status and memory status of passenger servers

require "rubygems"
require "bundler/setup"
require "newrelic_plugin"
require File.join(File.dirname(__FILE__), 'lib/status_parser')

module PassengerAgent

  class Agent < NewRelic::Plugin::Agent::Base

    agent_guid "com.petalmd.passenger"
    agent_version "1.0.0"
    agent_config_options :passenger_status
    # Name of instance that will display in New Relic
    agent_human_labels("Passenger") { "#{`hostname`}" }

# Send stats to New Relic
    def poll_cycle

      #initialize
      @status = Status.new(run_command(passenger_status))

      # Report data from passegner-status command
      report_metric "passenger/processes/running", "processes", @status.processes_current
      report_metric "passenger/processes/max", "processes", @status.processes_max

      report_metric "passenger/requests/waiting", "requests", @status.request_queue_size
      report_metric "passenger/requests/total", "requests", @status.requests_total
      @status.requests_per_worker.each do |idx, requests|
        report_metric "passenger/workers/requests/#{idx}", "requests", requests
      end

      report_metric "passenger/cpu/total", "percentage", @status.cpu_total
      @status.cpu_per_worker.each do |idx, cpu_usage|
        report_metric "passenger/workers/cpu/#{idx}", "percentage", cpu_usage
      end

      report_metric "passenger/memory/total", "bytes", @status.memory_total
      @status.memory_per_worker.each do |idx, memory_usage|
        report_metric "passenger/workers/memory/#{idx}", "bytes", memory_usage
      end

      @status.last_used_time_per_worker.each do |idx, time_elapsed|
        report_metric "passenger/workers/time_since_last_used/#{idx}", "seconds", time_elapsed
      end

      @status.uptime_per_worker.each do |idx, uptime|
        report_metric "passenger/workers/uptime/#{idx}", "seconds", uptime
      end
    end

    private

# Run command on passenger server to get data
    def run_command(command)

      result = `#{command}`
      unless $?.success?
        $stderr.puts "command: #{command} failed"
        exit 1
      end
      result
    end

  # Register this agent with the component.
  NewRelic::Plugin::Setup.install_agent :passenger, PassengerAgent

  # Launch the agent; this never returns.
  NewRelic::Plugin::Run.setup_and_run
  end

end
